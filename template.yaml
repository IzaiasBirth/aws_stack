AWSTemplateFormatVersion: "2010-09-09"
Description: Template para provisionamento da stack da atividade 1 do projeto final

Resources:
  # VPC: Criação da Virtual Private Cloud com suporte a DNS
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: Izaias-tf-VPC

  # Subnet: Configuração de uma sub-rede pública dentro da VPC
  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true # Garante que as instâncias recebem IP público ao serem criadas
      AvailabilityZone: !Select [ 0, !GetAZs '' ] # Seleção de zona de disponibilidade
      Tags:
        - Key: Name
          Value: Izaias-tf-Subnet
  
  # Internet Gateway: Habilita conexão com a Internet para a VPC
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Izaias-tf-InternetGateway 

  # Associação do Internet Gateway à VPC
  MyVPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVPC
      InternetGatewayId: !Ref MyInternetGateway
  
  # Route Table: Configuração da tabela de rotas da VPC
  MyRouteTable:
    Type: AWS::EC2::RouteTable  
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: Izaias-tf-RouteTable 
  
  # Configuração da rota padrão (default) para acesso à Internet
  MyPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: MyVPCGatewayAttachment
    Properties:
      RouteTableId: !Ref MyRouteTable
      DestinationCidrBlock: 0.0.0.0/0 # Rota para todo tráfego externo
      GatewayId: !Ref MyInternetGateway

  # Associação entre a tabela de rotas e a subnet
  MySubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyRouteTable
      SubnetId: !Ref MySubnet
  
  # Security Group: Configuração de regras de acesso HTTP à instância
  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Permite acesso HTTP via porta 80
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0 # Acesso permitido de qualquer IP externo
      Tags:
        - Key: Name
          Value: Izaias-tf-HTTPAccess 
  
  # Instância EC2: Máquina virtual configurada com aplicação web personalizada
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro # Tipo de instância para fins de economia
      ImageId: ami-01816d07b1128cd2d 
      KeyName: vockey # Nome do par de chaves para acesso SSH
      NetworkInterfaces:
        - AssociatePublicIpAddress: true # Garante IP público para a instância
          DeviceIndex: "0"
          GroupSet:
            - !Ref MySecurityGroup # Associa o Security Group configurado
          SubnetId: !Ref MySubnet
      Tags:
        - Key: Name
          Value: Izaias-tf-Instance 
      
      # Script de inicialização para instalação e configuração do servidor web com evidência personalizada
      UserData: 
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install httpd -y
          systemctl start httpd
          systemctl enable httpd
          echo "<html><h1>Izaias - Trabalho Final</h1><p>Template CloudFormation configurado com sucesso!</p></html>" > /var/www/html/index.html 

Outputs:
  # Saída: IP público da instância
  InstacePublicIP:
    Description: IP público da instância EC2
    Value: !GetAtt MySubnet.MapPublicIpOnLaunch
  
  # Saída: ID da VPC criada
  VPCID:
    Description: ID da VPC
    Value: !Ref MyVPC
  
  # Saída: ID do Security Group configurado
  SecurityGroupID:
    Description: ID do Security Group
    Value: !Ref MySecurityGroup
  
  # Saída: ID da instância EC2
  InstanceID:
    Description: ID da instância EC2
    Value: !Ref MyInstance